>>>>>>>>>> ¿QUE ES PERSISTENCE? <<<<<<<<<<<

- JPA o Java Persistence API

La persistencia de datos es un medio mediante el cual una aplicación puede recuperar información desde un sistema de 
almacenamiento no volátil y hacer que esta persista. La persistencia de datos es vital en las aplicaciones empresariales 
debido al acceso necesario a las bases de datos relacionales.

¿Cómo funciona Hibernate?

Resultado de imagen para que es HIBERNATE
Hibernate genera las sentencias SQL y libera al desarrollador del manejo manual de los datos que resultan de la ejecución 
de dichas sentencias, manteniendo la portabilidad entre todos los motores de bases de datos con un ligero incremento en el
tiempo de ejecución.6 ago. 2019


>>>> ¿QUE ES INYECCION DE DEPENDENCIAS? <<<<
La inversión de dependencias es un principio que describe un conjunto de técnicas destinadas a disminuir 
el acoplamiento entre los componentes de una aplicación.




>>>> JPA -> Es la especificación que nos dice como deberiamos mapear nuestros objetos a nuestra Base de dato Relacional
>>>> HIVERNATE -> Es la implementación, lo que permite que cuando el codigo ejecute, suceda algo.




LINK VIDEO: https://www.youtube.com/watch?v=fWOlTvmBiQA&list=PLcaI8vM1NK3teGT4oVi9JzyX8WLdkgbz_&index=2

LINK WEB PASOS: http://cristianruizblog.com/spring-boot-aplicacion-web-parte-1/


------- CONEXION A MYSQL MEDIANTE APLICATION.PROPERTIES ----------

#Data source 
#Indica el driver/lib para conectar java a mysql
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

#Url donde esta el servicio de tu mysql y el nombre de la base de datos
spring.datasource.url=jdbc:mysql://localhost:3306/springaplicacion

#Usuario y contrasena para tu base de datos descrita en la linea anterior
spring.datasource.username=root
spring.datasource.password=

#[Opcional]Imprime en tu consola las instrucciones hechas en tu base de datos.
spring.jpa.show-sql = true

#[Opcional]Crea las tablas.
spring.jpa.hibernate.ddl-auto=create



--> Luego creamos un repositorio "git" local


---- ¿QUE ES SERIALIZABLE? ------

La serialización es el proceso de convertir un objeto en una secuencia de bytes para almacenarlo o transmitirlo 
a la memoria, a una base de datos o a un archivo. 
Su propósito principal es guardar el estado de un objeto para poder volver a crearlo cuando sea necesario. 

----- ¿QUE ES serialVersionUID? -------
 es el id único que identifica una clase cuando lo serializamos, por lo cual en muchos entornos como el eclipse nos 
proponen un random serialVersionUID. Esto sumamente importante ya que mediante este id podemos identificar el objeto 
convertido en un array de bytes.


>>>> 1.- @GenericGenerator: (Usado por Hibernate), permite personalizar la generación, tiene los siguientes atributos: 
	   name: Define el nombre del generador referenciado en @GeneratedValue.

>>>> 2.- Lazy Load es un patrón de diseño muy simple que nos ayuda a optimizar la carga de datos cuando éstos son 
	   obtenidos de alguna fuente de datos (un archivo, una base de datos, un servicio web, etc.)

>>>> 3.- La anotación @Transient se utiliza para indicarle a JPA que un atributo de una Entidad no debe de ser persistente, 
	   de esta manera, JPA pasa por alto el atributo y no es tomado en cuenta a la hora de persistir el Objeto.
	   (COMO ES SOLO PARA CONFIRMAR EL PASSWORD NO ES NECESARIO ALMACENARLO EN LA BD)

>>>> 5.- Decorador @JoinTable: Este decorador sirve para indicar la tabla principal en una relación de "muchos a muchos", o quizás más claro, 
	   indica a quién pertenece aquello que se está relacionando.

>>>> 6.- La anotación @Controller indica que la clase es un bean controlador y nos ahorra el trabajo de definir en XML el bean correspondiente. 
	   Con @RequestMapping asociamos una URL a este controlador.

>>>> 7.- CrudRepository es una interfaz genérica que recibe dos tipos. El primero es la clase que esta interfaz manejará y el segundo es el tipo de dato 
	   del ID de la entidad. Observa, que NO implementamos la interfaz. Creamos una nueva interfaz y extendemos de CrudReposity.
	   (MINUTO >>> 1:23 https://www.youtube.com/watch?v=5kCXN_Q72qI&list=PLcaI8vM1NK3teGT4oVi9JzyX8WLdkgbz_&index=5)

>>>> 8.- Como no solo queremos devolver el String(ruta del html), sino que tambien queremos recibir dato, modelos etc.
	   

Las clases que implementan la interfaz Model son muy parecidas a un mapa. Le puedes añadir pares claves-valor en las que las claves son strings y los valores cualquier tipo de objeto.

>>>> 9.- Un Iterable es un interface que hace referencia a una colección de elementos que se puede recorrer, ni más ni menos. 
        Así pues el interface solo necesita que implementemos un método para poder funcionar de forma correcta, este método es iterator()


>>>> 10.- El "addAttribute" tiene como primer parametro el nombre de la variable que CONTENDRA el valor del segundo parámetro.

>>>> 11.- Lo que se ingrese en los inputs serán tomados como el valor del objeto que se estará creando a la hora del registro

>>>> 12.- @PostMapping --> Esta anotación se utiliza para asignar solicitudes HTTP POST a métodos de controlador específicos. @PostMapping es una anotación compuesta que actúa como un 
	    acceso directo para @RequestMapping (method = RequestMethod. POST).
	    
	    @RequestMapping: Anotación que se encarga de relacionar un método con una petición http. El uso de anotaciones no implica que unicamente tengamos un único
	    controlador sino que nos permite agrupar un conjunto de urls que esten asociadas a nivel de negocio en un controlador especifico.


>>>> 13.- Una de las anotaciones más habituales es Spring MVC @ModelAttribute que nos permite realizar un binding de los datos que tenemos en un formulario de Spring 
          con la capa de backend. Como se puede observar la url de /formularioPersona asignará un objeto Persona al Modelo utilizando la anotación @ModelAttribute.
	
	    Un binding es una asociación entre dos cosas, por ejemplo un nombre de variable con su contenido, o con su tipo, un método con su código, etc. 
          Estas asociaciones pueden ser realizadas en las diferentes etapas de vida de un programa.
		






----- CREACION DE FROND END ------


-- PARA PODER VER MIS PANTALLAS(HTML) DEL FRONT-END, DEBO CREAR UN CONTROLADOR QUE ME REDIRECCIONE CADA "REQUEST" A LA RUTA DEL HTML


-- PARA HACERLO MÁS FACIL EL TRABAJO, EL FORMULARIO SE DIVIRIRÁ EN 3:

1.- USER-VIEW.html
2.- USER-LIST.html
3.- USER-FORM.html


--> th:include="...", Me va a "incluir" un archivo dentro de este "div"-->
--> th:remove="tag", es para remover el div que encapsula la funcion de incluir-->



>>>>>> DEBEMOS ADECUAR LOS INPUT DEL HTML(user-form.html) PARA QUE LEAN Y PUEDAN MANDAR INFORMACION NECESARIA 
	 A NUESTRAS ENTIDADES, UTILIZANDO "SPRING MVC"


>>>>>>>>>> ESTADO DE USUARIOS ACTIVOS O INACTIVOS: 5:20 --> https://www.youtube.com/watch?v=5kCXN_Q72qI&list=PLcaI8vM1NK3teGT4oVi9JzyX8WLdkgbz_&index=5



---- AGREGAR VALIDACIONES A NUESTROS CAMPOS(ENTIDADES)
-- No podria usar validaciones  asi que instale las depencias
>>>>> https://hibernate.org/validator/documentation/getting-started/



>>>




















